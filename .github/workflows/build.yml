name: Openwrt Build
on:
  workflow_dispatch: 
    inputs:
      target:
        description: '目标设备'
        required: true
        default: 'vplus' 
        type: choice
        options:
        - vplus
        - beikeyun
        - l1pro 
        - rock5b
        - h88k
        - r66s 
        - r68s
        - h68k
        - e25 
        - s905
        - s905d
        - s905x2 
        - s905x3
        - s912
        - s922x 
        - s922x-n2 
        - qemu
        - r3g
        - r3p
        - rm2100
      config:
        description: '插件配置'
        required: true
        default: 'armv8'
        type: choice
        options:
        - armv8
        - armv8_full
        - r3g
        - r3p
        - rm2100
        - armv8_simple
      useLatestCode:
        description: '使用最新源代码编译'
        required: true
        type: boolean
        default: false
      useSelfHosted:
        description: '使用自建机器编译（需配置Runner）'
        required: true
        type: boolean
        default: false
      useCache:
        description: '使用编译缓存进行加速（仅自建机器下生效）'
        required: true
        type: boolean
        default: false
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      config:
        required: true
        type: string
      useSelfHosted:
        required: false
        type: boolean
        default: false
      useLatestCode:
        required: false
        type: boolean
        default: true
      useCache:
        required: false
        type: boolean
        default: false
jobs:
  build:
    name: Openwrt Build For ${{ inputs.target }}
    #runs-on: ubuntu-20.04 github action免费的机器配置有限，容易导致编译失败，建议自己配个runner，配置要求硬盘空闲容量有50G以上，并装好docker，支持访问外网即可，建议使用ubuntu-20.04系统
    runs-on: ${{ inputs.useSelfHosted && 'self-hosted' || 'ubuntu-20.04' }}
    timeout-minutes: 2880
    env:
      package_build_tool_path: 'source' # 存放本项目工具的目录名称
      compile_path: 'compile_dir' # 存放编译过程产物及产出物的目录名称
      container_name: 'GithubActionBuild_${{ github.run_number }}' # 编译时使用的容器名
    steps:
      - name: Print input
        run: |
          echo "target: ${{ inputs.target }}"
          echo "config: ${{ inputs.config }}"
          echo "useSelfHosted: ${{ inputs.useSelfHosted }}"
          echo "useLatestCode: ${{ inputs.useLatestCode }}"
          echo "useCache: ${{ inputs.useCache }}"

      - name: Expand disk space
        if: ${{ !inputs.useSelfHosted }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2560
          swap-size-mb: 256
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Clean source
        if: ${{ inputs.useSelfHosted }}
        run: sudo rm -rf ${{ env.package_build_tool_path }}

      - name: Clean environment
        if:  ${{ inputs.useSelfHosted && !inputs.useCache  }} 
        run: sudo rm -rf ${{ env.compile_path }}

      - name: Checkout source
        uses: actions/checkout@v2.5.0
        with:
          path: ${{ env.package_build_tool_path }}

      - name: Set use latest code
        if:  ${{ inputs.useLatestCode }} 
        run: sudo echo '' > version.sh
        working-directory: ${{ env.package_build_tool_path }}

      - name: Build firmware
        run: sudo ./run_build_use_docker.sh -c ${{ inputs.config }} -d ${{ inputs.target }} -n ${{ env.container_name }} -o ${{ github.workspace }}/${{ env.compile_path }}
        working-directory: ${{ env.package_build_tool_path }}

      - name: Set artifact path
        run: |
          ARTIFACT_PATH=$PWD/$(ls artifact/*/*.7z)
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV
          echo "ARTIFACT_FILE=$(basename $ARTIFACT_PATH)" >> $GITHUB_ENV
        working-directory: ${{ env.compile_path }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.ARTIFACT_PATH }}
          retention-days: 3

      - name: Remove container
        if: always()
        run: sudo docker rm -f ${{ env.container_name }} && echo 'remove success' || echo 'unnecessary remove'
